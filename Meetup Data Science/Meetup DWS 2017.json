{"paragraphs":[{"text":"%pyspark\nimport sys\nprint(\"Python: \", sys.version.replace(\"\\n\", \" - \"))\nprint(\"Spark:  \", spark.version)\n","user":"anonymous","dateUpdated":"2017-04-07T15:23:10+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234596_2018600925","id":"20170403-133004_1344536152","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:23:10+0000","dateFinished":"2017-04-07T15:23:26+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:10559"},{"text":"%pyspark\nimport pandas as pd\nimport numpy as np\n","user":"anonymous","dateUpdated":"2017-04-07T15:23:29+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234599_2018985674","id":"20170403-133025_1299566241","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:23:29+0000","dateFinished":"2017-04-07T15:23:30+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10560"},{"text":"%pyspark\nfrom pyspark.sql.functions import col, desc, lit, udf, struct, collect_list, explode, size, concat_ws, split\nfrom pyspark.sql.types import ArrayType, DoubleType, IntegerType, StringType, StructType, StructField\nfrom pyspark.sql import Row\n","user":"anonymous","dateUpdated":"2017-04-07T15:23:35+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234600_2017061929","id":"20170403-133033_1328123834","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:23:35+0000","dateFinished":"2017-04-07T15:23:35+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10561"},{"text":"%md\n### Some Helpers\n","user":"anonymous","dateUpdated":"2017-04-07T15:41:19+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234601_2016677180","id":"20170403-133111_1069824334","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:41:19+0000","dateFinished":"2017-04-07T15:41:19+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10562","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Some Helpers</h3>\n</div>"}]}},{"text":"%pyspark\nfrom zeppelin_session import ZeppelinSession, resetZeppelinSession\n\nresetZeppelinSession(z.z)\nsession = ZeppelinSession(z.z)\n","user":"anonymous","dateUpdated":"2017-04-07T15:23:37+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234602_2017831427","id":"20170403-140614_1751208593","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:23:37+0000","dateFinished":"2017-04-07T15:23:37+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10563"},{"text":"%pyspark\n\nsession.start()\n","user":"anonymous","dateUpdated":"2017-04-07T15:23:38+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234603_2017446678","id":"20170403-140645_1725487450","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:23:38+0000","dateFinished":"2017-04-07T15:23:39+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10564"},{"text":"%pyspark\nfrom nvd3_stat import Nvd3\n\nnv = Nvd3()\n\nnv.reloadNVD3()\n","user":"anonymous","dateUpdated":"2017-04-07T15:23:41+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234603_2017446678","id":"20170403-133049_975408174","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:23:41+0000","dateFinished":"2017-04-07T15:23:42+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10565"},{"text":"%md\n## 1 Data\n\n### 1.1 Artist Data\n","user":"anonymous","dateUpdated":"2017-04-07T15:41:23+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234604_2015522933","id":"20170403-133223_1196334178","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:41:23+0000","dateFinished":"2017-04-07T15:41:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10566","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>1 Data</h2>\n<h3>1.1 Artist Data</h3>\n</div>"}]}},{"title":"Skip the following steps if the data has already been saved ...","text":"%pyspark\n\ndef intOrNeg(value):\n    try:\n        i = int(value)\n    except:\n        i = -9999999\n    return i\n","user":"anonymous","dateUpdated":"2017-04-07T15:23:45+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234605_2015138185","id":"20170403-133149_830397318","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:22:26+0000","dateFinished":"2017-04-04T12:22:26+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10567"},{"text":"%pyspark\n\nrawArtistData = sc.textFile(\"/data/lastfm/artist_data.txt\")\nrawArtistData.count()\n","user":"bernhard","dateUpdated":"2017-04-04T12:22:37+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":false,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234606_2016292431","id":"20170403-133345_1276112801","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:22:30+0000","dateFinished":"2017-04-04T12:22:36+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10568"},{"text":"%pyspark\nrawArtistData.filter(lambda row: \"\\t\" not in row).count() # to be ignored","user":"bernhard","dateUpdated":"2017-04-04T12:22:42+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":false,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234607_2015907682","id":"20170403-133423_195179405","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:22:41+0000","dateFinished":"2017-04-04T12:22:43+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10569"},{"text":"%pyspark\n\nartistData = (rawArtistData.filter(lambda row: \"\\t\" in row)\n                        .map(lambda row: row.split(\"\\t\"))\n                        .map(lambda row: Row(artistid=intOrNeg(row[0],), artistname=row[1],))\n).toDF()\n","user":"bernhard","dateUpdated":"2017-04-04T12:22:48+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":false,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234607_2015907682","id":"20170403-133423_1900223502","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:22:47+0000","dateFinished":"2017-04-04T12:22:47+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10570"},{"text":"%pyspark\nartistData.where(artistData.artistid == -9999999).count()\n","user":"bernhard","dateUpdated":"2017-04-04T12:22:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":false,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234608_2026295903","id":"20170403-133423_991889421","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:22:55+0000","dateFinished":"2017-04-04T12:23:10+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10571"},{"text":"%pyspark\nartistData = artistData.where(artistData.artistid != -9999999).cache()\n","user":"bernhard","dateUpdated":"2017-04-04T12:23:17+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":false,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234609_2025911154","id":"20170403-133423_1015233947","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:23:16+0000","dateFinished":"2017-04-04T12:23:16+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10572"},{"text":"%pyspark\nartistData.write.parquet(\"/data/lastfm/artist_data.parquet\")\n","user":"bernhard","dateUpdated":"2017-04-04T12:24:28+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":false,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234609_2025911154","id":"20170403-133423_1422351191","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:24:23+0000","dateFinished":"2017-04-04T12:24:40+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10573"},{"title":"Start here if the data has already been saved and load it","text":"%pyspark\n\nartistData = spark.read.parquet(\"/data/lastfm/artist_data.parquet\")\n","user":"anonymous","dateUpdated":"2017-04-07T15:23:48+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234610_2027065400","id":"20170403-133423_466205303","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:23:49+0000","dateFinished":"2017-04-07T15:23:51+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10574"},{"text":"%pyspark\n\nartistData.count()\n","user":"anonymous","dateUpdated":"2017-04-07T15:23:52+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234611_2026680652","id":"20170403-133422_1423154237","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:23:52+0000","dateFinished":"2017-04-07T15:23:55+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10575"},{"text":"%md\n### 1.2 Artist Alias\n","user":"anonymous","dateUpdated":"2017-04-07T15:41:28+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234611_2026680652","id":"20170403-133422_1045625620","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:41:28+0000","dateFinished":"2017-04-07T15:41:28+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10576","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>1.2 Artist Alias</h3>\n</div>"}]}},{"text":"%pyspark\nrawArtistAlias = sc.textFile(\"/data/lastfm/artist_alias.txt\")\n\nartistAlias = (rawArtistAlias.map(lambda row: row.split(\"\\t\"))\n                             .filter(lambda row: row[0] != \"\")\n                             .map(lambda row: (int(row[0],), int(row[1],)))\n)\n","user":"anonymous","dateUpdated":"2017-04-07T15:23:56+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234612_2024756907","id":"20170403-133422_1549926578","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:23:56+0000","dateFinished":"2017-04-07T15:23:56+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10577"},{"text":"%pyspark\nidmap = dict(artistAlias.collect())\n","user":"anonymous","dateUpdated":"2017-04-07T15:23:59+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234613_2024372158","id":"20170403-133422_1372553655","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:23:59+0000","dateFinished":"2017-04-07T15:24:00+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10578"},{"text":"%pyspark\nartistData.where(artistData.artistid.isin([2097164, 1001134],)).show()\n","user":"anonymous","dateUpdated":"2017-04-07T15:24:01+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234613_2024372158","id":"20170403-133422_1018533986","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:24:01+0000","dateFinished":"2017-04-07T15:24:02+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10579"},{"text":"%md\n### 1.3 User Artist Data\n","user":"anonymous","dateUpdated":"2017-04-07T15:41:31+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234614_2025526405","id":"20170403-133422_1319909635","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:41:31+0000","dateFinished":"2017-04-07T15:41:31+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10580","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>1.3 User Artist Data</h3>\n</div>"}]}},{"title":"Skip the following steps if the data has already been saved ...","text":"%pyspark\nbcidmap = sc.broadcast(idmap)\n","user":"anonymous","dateUpdated":"2017-04-07T15:24:05+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234615_2025141656","id":"20170403-133422_1426006648","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:25:25+0000","dateFinished":"2017-04-04T12:25:25+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10581"},{"text":"%pyspark\n\nrawUserArtistData = sc.textFile(\"/data/lastfm/user_artist_data.txt\")\n\nuserArtistData1 = (rawUserArtistData\n                .map(lambda row: row.split(\" \"))                   \n                .map(lambda row: Row(userid      = int(row[0]), \n                                     rawartistid = int(row[1]),\n                                     artistid    = bcidmap.value.get(int(row[1]), int(row[1])),\n                                     playcount   = int(row[2])))\n).toDF()\n","user":"anonymous","dateUpdated":"2017-04-07T15:24:06+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":false,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234615_2025141656","id":"20170403-133421_1143568414","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:25:30+0000","dateFinished":"2017-04-04T12:25:30+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10582"},{"text":"%pyspark\n\nuserArtistData2 = (userArtistData1.select([\"userid\",\"artistid\",\"playcount\"],)\n                               .groupBy([\"userid\",\"artistid\"],)\n                               .sum(\"playcount\")\n                               .withColumnRenamed(\"sum(playcount)\", \"playcount\")\n)\n","user":"anonymous","dateUpdated":"2017-04-07T15:24:10+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":false,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234616_2023217911","id":"20170403-133421_281676895","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:25:35+0000","dateFinished":"2017-04-04T12:25:35+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10583"},{"text":"%pyspark\n# How many artists do users listen to\n\nuserGroups = (userArtistData2.select([\"artistid\", \"userId\"])\n                          .groupBy(col(\"userid\"))\n                          .count()\n         ).cache()\n","user":"bernhard","dateUpdated":"2017-04-04T12:26:21+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":false,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234617_2022833163","id":"20170403-133421_558813225","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:25:45+0000","dateFinished":"2017-04-04T12:25:45+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10584"},{"text":"%pyspark\n\nhist = userGroups.rdd.values().histogram([0, 5, 10, 20,40,80,160,320,640,1280,2560,5120,10240,20480,450000],)\nhist\n","user":"bernhard","dateUpdated":"2017-04-04T12:30:57+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234617_2022833163","id":"20170403-133421_161574810","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:25:51+0000","dateFinished":"2017-04-04T12:30:30+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10585"},{"text":"%pyspark\n\ndb = nv.discreteBarChart()\ndb.plot({\"Bucket\":hist[0][1:], \"Count\":hist[1]}, \"Bucket\", \"Count\")\n","user":"bernhard","dateUpdated":"2017-04-04T12:30:59+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":false,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234618_2023987409","id":"20170403-133421_89565607","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:30:55+0000","dateFinished":"2017-04-04T12:30:55+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10586"},{"title":"","text":"%pyspark\n\n# Remove upper \"outliers\"\n\nuserArtistData = (userGroups.where(col(\"count\") >= 10).where(col(\"count\") <= 1500)\n                         .select([\"userid\"],)\n                         .join(userArtistData2, on=\"userid\"))\n","user":"bernhard","dateUpdated":"2017-04-04T12:31:05+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":false,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234619_2023602660","id":"20170403-133421_1825164051","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:31:03+0000","dateFinished":"2017-04-04T12:31:03+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10587"},{"text":"%pyspark\n\n(userArtistData.groupby(\"artistid\")\n            .count()\n            .join(artistData, on=\"artistid\")\n            .sort(desc(\"count\"))\n).show(10)\n","user":"bernhard","dateUpdated":"2017-04-04T12:35:54+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":false,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234619_2023602660","id":"20170403-133420_527305559","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:31:09+0000","dateFinished":"2017-04-04T12:35:43+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10588"},{"title":"","text":"%pyspark\n\n# Remove artist 1034635 ( [unknown] )\n\nuserArtistData = userArtistData.where(userArtistData.artistid != 1034635)\n","user":"bernhard","dateUpdated":"2017-04-04T12:36:08+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":false,"results":{},"enabled":false},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234620_2021678916","id":"20170403-133410_1462557703","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:36:05+0000","dateFinished":"2017-04-04T12:36:05+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10589"},{"text":"%sh\nhdfs dfs -rm -r /data/lastfm/user_artist_data.parquet\n","user":"bernhard","dateUpdated":"2017-04-04T12:36:16+0000","config":{"colWidth":12,"editorMode":"ace/mode/sh","results":{},"enabled":false,"editorSetting":{"language":"sh","editOnDblClick":false}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234621_2021294167","id":"20170403-133904_1720246315","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:36:10+0000","dateFinished":"2017-04-04T12:36:13+0000","status":"ERROR","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10590"},{"text":"%pyspark\nuserArtistData.write.parquet(\"/data/lastfm/user_artist_data.parquet\")","user":"bernhard","dateUpdated":"2017-04-04T12:42:36+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":false,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234621_2021294167","id":"20170403-133904_1054376981","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T12:36:21+0000","dateFinished":"2017-04-04T12:41:01+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10591"},{"title":"Start here if the data has already been saved and load it","text":"%pyspark\n\nuserArtistData = spark.read.parquet(\"/data/lastfm/user_artist_data.parquet\")\n","user":"anonymous","dateUpdated":"2017-04-07T15:24:15+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234622_2022448414","id":"20170403-133904_619482450","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:24:15+0000","dateFinished":"2017-04-07T15:24:16+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10592"},{"text":"%pyspark\n\nprint(userArtistData.count())\nuserArtistData.show(5)\n","user":"anonymous","dateUpdated":"2017-04-07T15:24:18+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234623_2022063665","id":"20170403-133904_317843222","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:24:18+0000","dateFinished":"2017-04-07T15:24:19+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10593"},{"text":"%pyspark\n\nuserGroups = (userArtistData.select([\"artistid\", \"userId\"],)\n                            .groupBy(col(\"userid\"))\n                            .count())\n\nhist = userGroups.rdd.values().histogram([10, 20, 40, 80, 160, 240, 320, 480, 560, 640, 800, 960, 1280, 1500])\n\ndb = nv.discreteBarChart()\ndb.plot({\"Bucket\":hist[0][1:], \"Count\":hist[1]}, \"Bucket\", \"Count\")\n","user":"anonymous","dateUpdated":"2017-04-07T15:24:21+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234623_2022063665","id":"20170403-133904_241050557","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:24:21+0000","dateFinished":"2017-04-07T15:24:29+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10594"},{"text":"%md\n## 2 The model","user":"anonymous","dateUpdated":"2017-04-07T15:41:38+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234624_2106323674","id":"20170403-133903_1034387887","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:41:38+0000","dateFinished":"2017-04-07T15:41:38+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10595","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>2 The model</h2>\n</div>"}]}},{"text":"%pyspark\nfrom pyspark.ml.evaluation import RegressionEvaluator\nfrom pyspark.ml.recommendation import ALS\n\ndef alsModel(df, rank, maxIter, regParam, alpha):\n    als = ALS(rank=rank, maxIter=maxIter, regParam=regParam, alpha=alpha,\n              implicitPrefs=True,\n              userCol=\"userid\", itemCol=\"artistid\", ratingCol=\"playcount\")\n\n    return als.fit(df)\n","user":"anonymous","dateUpdated":"2017-04-07T15:24:33+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234625_2105938925","id":"20170403-133903_445078515","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:24:33+0000","dateFinished":"2017-04-07T15:24:33+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10596"},{"text":"%md\n## 3 Model Evaluation\n","user":"anonymous","dateUpdated":"2017-04-07T15:42:07+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234625_2105938925","id":"20170403-133903_1819723002","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:42:07+0000","dateFinished":"2017-04-07T15:42:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10597","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>3 Model Evaluation</h2>\n</div>"}]}},{"title":"Fast but can lead to NAN in predictions when algorithm runs out of training or test data","text":"%pyspark\n\ntraining, test = userArtistData.randomSplit([0.9, 0.1])\n\ntraining.cache()\ntest.cache()\n","user":"anonymous","dateUpdated":"2017-04-07T15:24:34+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234626_2107093172","id":"20170403-133903_1747238837","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:24:34+0000","dateFinished":"2017-04-07T15:24:34+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10598"},{"text":"%pyspark\n\nmodel = alsModel(training, rank=10, maxIter=5, regParam=0.1, alpha=1.0)\n","user":"anonymous","dateUpdated":"2017-04-07T15:24:36+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234627_2106708423","id":"20170403-133902_109877784","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:24:36+0000","dateFinished":"2017-04-07T15:25:51+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10599"},{"text":"%md\n### 3.1 Manually examinig some example users","user":"anonymous","dateUpdated":"2017-04-07T15:41:41+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234627_2106708423","id":"20170403-133902_730846172","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:41:41+0000","dateFinished":"2017-04-07T15:41:41+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10600","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>3.1 Manually examinig some example users</h3>\n</div>"}]}},{"text":"%pyspark\n\ndef compareFavs(user, count=20):\n    test_user = test.where(col(\"userid\") == user).cache()\n    training_user = training.where(col(\"userid\") == user)\n\n    # 1) Extract Favourites from training set\n\n    training_favs = (training_user.join(artistData, on=\"artistid\")\n                                  .sort(desc(\"playcount\"))\n                                  .select(col(\"playcount\").alias(\"training_playcount\"),\n                                          col(\"artistname\").alias(\"training_artist\"))\n                    ).limit(count).toPandas()\n\n\n\n    # 2) Extract Favourites from test set (cond = True)\n\n    test_favs = (test_user.join(artistData, on=\"artistid\")\n                          .sort(desc(\"playcount\"))\n                          .select(col(\"playcount\").alias(\"test_playcount\"),\n                                  col(\"artistname\").alias(\"test_artist\"))\n                ).limit(count).toPandas()\n\n\n    # 3) Extract Favourites from test set (cond = True)\n\n    predictions = (model.transform(test_user.select([\"userid\", \"artistid\"])).dropna()).limit(count)\n\n    recommendations = (predictions.join(artistData, on=\"artistid\")\n                                  .sort(desc(\"prediction\"))\n                                  .select(col(\"prediction\"),\n                                          col(\"artistname\").alias(\"recommended_artist\"))\n                      ).toPandas()\n\n\n    test_user.unpersist()\n\n    return training_favs.join(recommendations.join(test_favs))\n","user":"anonymous","dateUpdated":"2017-04-07T15:25:54+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234628_2104784678","id":"20170403-133902_815295954","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:25:54+0000","dateFinished":"2017-04-07T15:25:54+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10601"},{"title":"User 1","text":"%pyspark\n\nuser = 2268277\n\ndf1 = compareFavs(user)[:10]\n\nprint(\"%html\", df1.to_html())\n","user":"anonymous","dateUpdated":"2017-04-07T15:25:57+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234629_2104399929","id":"20170403-133902_1809410740","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:25:57+0000","dateFinished":"2017-04-07T15:26:11+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10602"},{"title":"User 2","text":"%pyspark\n\nuser = 2294531\n\ndf2 = compareFavs(user)[:10]\n\nprint(\"%html\", df2.to_html())\n","user":"anonymous","dateUpdated":"2017-04-07T15:25:59+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234629_2104399929","id":"20170403-133901_32484073","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:25:59+0000","dateFinished":"2017-04-07T15:26:17+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10603"},{"text":"%md\n### 3.2 By calulating the AUC for one example user\n\n","user":"anonymous","dateUpdated":"2017-04-07T15:41:46+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234630_2105554176","id":"20170403-133901_1962427702","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:41:46+0000","dateFinished":"2017-04-07T15:41:46+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10604","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>3.2 By calulating the AUC for one example user</h3>\n</div>"}]}},{"title":"Get all artists users have listened to","text":"%pyspark\n\nimport numpy as np\nimport pandas as pd\n\nallArtists = np.array(userArtistData.select(\"artistid\")\n                                    .distinct()\n                                    .rdd\n                                    .flatMap(lambda x: x)\n                                    .collect())\n","user":"anonymous","dateUpdated":"2017-04-07T15:26:32+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234631_2105169427","id":"20170403-133901_1342909049","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:26:32+0000","dateFinished":"2017-04-07T15:26:39+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10605"},{"title":"Sample a random set from all unique artists of same length as input, however without elements of input","text":"%pyspark\n\ndef sample(positive, all):\n    negative = np.random.choice(all, size=2*positive.size)\n    return np.setdiff1d(negative, positive)[:positive.size]\n","user":"anonymous","dateUpdated":"2017-04-07T15:26:35+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234631_2105169427","id":"20170403-133901_1164957799","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:26:35+0000","dateFinished":"2017-04-07T15:26:39+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10606"},{"text":"%pyspark\n\n# user = 2268277\nuser = 2294531\n","user":"anonymous","dateUpdated":"2017-04-07T15:26:37+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234632_2103245683","id":"20170403-133901_415850504","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:26:39+0000","dateFinished":"2017-04-07T15:26:39+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10607"},{"title":"Let's take the listened artist in the test set as \"condition true\" (what the user really listened) ...","text":"%pyspark\n\ntestPositive = (test.where(col(\"userid\") == user)\n                    .select([\"userid\", \"artistid\"]))\n                    \ntestPositive.show(3)\n","user":"anonymous","dateUpdated":"2017-04-07T15:26:41+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234632_2103245683","id":"20170403-133901_529470707","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:26:41+0000","dateFinished":"2017-04-07T15:26:41+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10608"},{"title":"... and randomly select a list of artists from all artist this user never listened to","text":"%pyspark\n\ntestPositiveList = np.array(testPositive.rdd.flatMap(lambda x: x).collect())\ntestNegativeList = sample(testPositiveList, allArtists)\n\ntestNegative = (spark.createDataFrame(pd.DataFrame({\"artistid\":testNegativeList,\n                                                    \"userid\":[user]*len(testNegativeList)})))\n\ntestNegative.show(3)\n","user":"anonymous","dateUpdated":"2017-04-07T15:26:43+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234633_2102860934","id":"20170403-133900_1609433483","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:26:43+0000","dateFinished":"2017-04-07T15:26:44+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10609"},{"title":"Create the predictions for the positive and negative test cases","text":"%pyspark\n\npositivePredictions = model.transform(testPositive).dropna().withColumn(\"cond\", lit(1))\n\nnegativePredictions = model.transform(testNegative).dropna().withColumn(\"cond\", lit(0))\n\npredictions = positivePredictions.union(negativePredictions).select([\"cond\", \"prediction\"])\n","user":"anonymous","dateUpdated":"2017-04-07T15:26:46+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234634_2104015180","id":"20170403-133900_210309354","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:26:46+0000","dateFinished":"2017-04-07T15:26:46+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10610"},{"text":"%pyspark\npredictions.sort(desc(\"prediction\")).show(100)\n","user":"anonymous","dateUpdated":"2017-04-07T15:26:49+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234634_2104015180","id":"20170403-195315_332856570","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:26:49+0000","dateFinished":"2017-04-07T15:26:53+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10611"},{"title":"a) Spark BinaryClassificationEvaluator","text":"%pyspark\nfrom pyspark.sql.types import DoubleType\nfrom pyspark.ml.evaluation import BinaryClassificationEvaluator\n\ntoDouble = udf(lambda x: float(x), DoubleType())\n\ndef spark_metric(predictions, roc=True):\n    metricName=\"areaUnderROC\" if roc else \"areaUnderPR\"\n    evaluator = BinaryClassificationEvaluator(rawPredictionCol=\"prediction\", labelCol=\"cond\", metricName=metricName)\n    metric = evaluator.evaluate(predictions.select([\"cond\", toDouble(\"prediction\").alias(\"prediction\")]))\n    return metric\n    ","user":"anonymous","dateUpdated":"2017-04-07T15:27:08+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234635_2103630432","id":"20170403-174405_1449446490","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:27:08+0000","dateFinished":"2017-04-07T15:27:08+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10612"},{"title":"","text":"%pyspark\n\nauc1 = spark_metric(predictions)\naucpr1 = spark_metric(predictions, roc=False)\n\nprint(auc1, aucpr1)\n","user":"anonymous","dateUpdated":"2017-04-07T15:27:10+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":false,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234636_2101706687","id":"20170403-175448_9010775","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:27:10+0000","dateFinished":"2017-04-07T15:27:39+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10613"},{"title":"b) Spark + Scikit Learn Metrics","text":"%pyspark\nimport sklearn.metrics as skm\n\ndef skm_metrics(predictions, roc=True):\n    preds = predictions.toPandas()\n    if roc:\n        auc = skm.roc_auc_score(preds[\"cond\"], preds[\"prediction\"])\n    else:\n        auc = skm.average_precision_score(preds[\"cond\"], preds[\"prediction\"])\n    return auc\n    ","user":"anonymous","dateUpdated":"2017-04-07T15:27:13+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234636_2101706687","id":"20170403-134408_1635193937","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:27:13+0000","dateFinished":"2017-04-07T15:27:39+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10614"},{"title":"Scikit Learn way","text":"%pyspark\n\nauc2   = skm_metrics(predictions)\naucpr2 = skm_metrics(predictions, False)\n\nprint(auc2, aucpr2)\n","user":"anonymous","dateUpdated":"2017-04-07T15:27:15+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234637_2101321938","id":"20170403-134407_73725397","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:27:39+0000","dateFinished":"2017-04-07T15:27:45+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10615"},{"text":"%pyspark\n\ndef rocChart(positivePredictions, negativePredictions):\n    preds = positivePredictions.select(\"prediction\", \"cond\").union(\n            negativePredictions.select(\"prediction\", \"cond\")).toPandas()\n    fpr, tpr, _ = skm.roc_curve(preds[\"cond\"], preds[\"prediction\"])\n\n    roc = nv.lineChart()\n    \n    config = {\"width\":600, \"height\":500, \"color\":nv.c20(3,5,7,8,1),\n              \"xDomain\":[0,1], \"yDomain\":[0,1.05],\n              \"xAxis\":{\"axisLabel\":\"False Positive Rate\", \"tickFormat\":\",.2f\"},\n              \"yAxis\":{\"axisLabel\":\"True Positive Rate\", \"tickFormat\":\",.2f\"}\n             }\n    \n    roc.addLine({\"FPR\":fpr, \"TPR\":tpr}, \"FPR\", \"TPR\")\n    roc.addLine({\"X\":[0,1], \"Baseline\":[0,1]}, \"X\", \"Baseline\", lineAttributes={\"style\":\"dotted\"})\n    \n    roc.plot(config=config)\n\nrocChart(positivePredictions, negativePredictions)\n","user":"anonymous","dateUpdated":"2017-04-07T15:27:48+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234638_2102476185","id":"20170403-134407_1725800594","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:27:48+0000","dateFinished":"2017-04-07T15:27:52+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10616"},{"text":"%md\n### By a \"mean AUC\"\n\n#### Make a broadcast variable out of allArtists\n","user":"anonymous","dateUpdated":"2017-04-07T15:41:53+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"colWidth":12,"editorMode":"ace/mode/markdown","editorHide":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234638_2102476185","id":"20170403-134407_261696365","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:41:53+0000","dateFinished":"2017-04-07T15:41:53+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:10617","results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>By a &ldquo;mean AUC&rdquo;</h3>\n<h4>Make a broadcast variable out of allArtists</h4>\n</div>"}]}},{"text":"%pyspark\nfrom pyspark.sql.types import ArrayType, IntegerType, DoubleType\nfrom pyspark.sql.functions import collect_list, explode\n","user":"anonymous","dateUpdated":"2017-04-07T15:27:55+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234639_2102091436","id":"20170403-134406_415487636","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:27:55+0000","dateFinished":"2017-04-07T15:27:55+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10618"},{"text":"%pyspark\nbcAllArtists = sc.broadcast(allArtists)\n\ndef sample2(positive):\n    all = bcAllArtists.value\n    plen = len(positive)\n    negative = np.random.choice(all, size=2*plen)\n    return np.setdiff1d(negative, positive)[:plen].tolist()\n\nsampleUdf = udf(sample2, ArrayType(IntegerType()))\n","user":"anonymous","dateUpdated":"2017-04-07T15:27:57+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234640_2112479656","id":"20170403-134406_990993074","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:27:57+0000","dateFinished":"2017-04-07T15:27:57+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10619"},{"text":"%pyspark\npositiveTest = test.select([\"userid\", \"artistid\"])\npositiveTest.cache()\n\nnegativeTest = (test.groupBy(\"userid\")\n                    .agg(collect_list(\"artistid\").alias(\"positiveArtists\"))\n                    .withColumn(\"negativeArtists\", sampleUdf('positiveArtists'))\n                    .select([\"userid\", explode(\"negativeArtists\").alias(\"artistid\")])\n)\n\nnegativeTest.cache()\n","user":"anonymous","dateUpdated":"2017-04-07T15:27:59+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234640_2112479656","id":"20170403-134406_1809557908","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:27:59+0000","dateFinished":"2017-04-07T15:27:59+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10620"},{"text":"%pyspark\npositivePredictions = (model.transform(positiveTest).dropna().withColumn(\"cond\", lit(1))).cache()\nnegativePredictions = (model.transform(negativeTest).dropna().withColumn(\"cond\", lit(0))).cache()\n\npredictions = positivePredictions.select([\"userid\", \"cond\", \"prediction\"]).union(\n                negativePredictions.select([\"userid\", \"cond\", \"prediction\"])\n              )\n              ","user":"anonymous","dateUpdated":"2017-04-07T15:41:02+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234641_2112094907","id":"20170403-134406_2097243201","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:28:01+0000","dateFinished":"2017-04-07T15:28:01+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10621"},{"text":"%pyspark\n\ndef metrics(conds, predictions, roc=True):\n    if len(conds) < 2 or len(predictions) < 2:\n        return None\n    if len(set(conds)) == 1:\n        return None\n\n    if roc:\n        auc = skm.roc_auc_score(conds, predictions)\n    else:\n        auc = skm.average_precision_score(conds, predictions)\n\n    return auc.item()       # convert numpy type to python type\n\n\ndef auc(conds, predictions):\n    return metrics(conds, predictions, True)\n    \ndef aucpr(conds, predictions):\n    return metrics(conds, predictions, False)\n\n   \naucUdf = udf(auc, DoubleType())\naucprUdf = udf(aucpr, DoubleType())\n\n","user":"anonymous","dateUpdated":"2017-04-07T15:28:03+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234642_2113249154","id":"20170403-134405_337929373","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:28:03+0000","dateFinished":"2017-04-07T15:28:03+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10622"},{"title":"Mean AUC","text":"%pyspark\n\nallAucs = (predictions.groupby(\"userid\")\n                      .agg(collect_list(\"cond\").alias(\"conds\"), collect_list(\"prediction\").alias(\"predictions\"))\n                      .withColumn(\"auc\", aucUdf(\"conds\", \"predictions\"))\n)\n\nallAucs.describe(\"auc\").show()\n","user":"anonymous","dateUpdated":"2017-04-07T15:28:09+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234643_2112864405","id":"20170403-134404_28384550","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-07T15:28:09+0000","dateFinished":"2017-04-07T15:29:24+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10623"},{"title":"Mean Average Precision","text":"%pyspark\n\nallAucprs = (predictions.groupby(\"userid\")\n                        .agg(collect_list(\"cond\").alias(\"conds\"), collect_list(\"prediction\").alias(\"predictions\"))\n                        .withColumn(\"aucpr\", aucprUdf(\"conds\", \"predictions\"))\n)\n\nallAucprs.describe(\"aucpr\").show()\n","user":"anonymous","dateUpdated":"2017-04-04T17:01:26+0000","config":{"editorSetting":{"language":"python"},"colWidth":12,"editorMode":"ace/mode/python","title":true,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234643_2112864405","id":"20170403-192207_212376114","dateCreated":"2017-04-04T12:17:14+0000","dateStarted":"2017-04-04T17:01:26+0000","dateFinished":"2017-04-04T17:03:19+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10624"},{"text":"%pyspark\n","dateUpdated":"2017-04-04T12:17:14+0000","config":{"colWidth":12,"editorMode":"ace/mode/python","results":{},"enabled":true,"editorSetting":{"language":"python"}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1491308234644_2110940661","id":"20170403-200037_561948851","dateCreated":"2017-04-04T12:17:14+0000","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:10625"}],"name":"Meetup DWS 2017","id":"2CCFVJKN4","angularObjects":{"2CCPVKVNH:shared_process":[],"2CDXWBNBQ:shared_process":[],"2CCH1Q3KF:shared_process":[],"2CF772TCW:shared_process":[],"2CDZSKACE:shared_process":[],"2C4U48MY3_spark2:shared_process":[{"name":"__zeppelin_comm_2CCFVJKN4_status__","object":"ZeppelinSession started (do not delete this paragraph)","noteId":"2CCFVJKN4"},{"name":"__zeppelin_comm_2CCFVJKN4_msg__","object":{"msg":{"delay":200,"function":"lineChart","object":{"data":{"data":[{"values":[{"x":0,"y":0.020833333333333332},{"x":0,"y":0.8958333333333334},{"x":0.06521739130434782,"y":0.8958333333333334},{"x":0.06521739130434782,"y":0.9166666666666666},{"x":0.07608695652173914,"y":0.9166666666666666},{"x":0.07608695652173914,"y":0.9375},{"x":0.31521739130434784,"y":0.9375},{"x":0.31521739130434784,"y":0.9583333333333334},{"x":0.5978260869565217,"y":0.9583333333333334},{"x":0.5978260869565217,"y":0.9791666666666666},{"x":0.9891304347826086,"y":0.9791666666666666},{"x":0.9891304347826086,"y":1},{"x":1,"y":1}],"key":"TPR"},{"classed":"dotted","values":[{"x":0,"y":0},{"x":1,"y":1}],"key":"Baseline"}],"config":{"yAxis":{"axisLabel":"True Positive Rate","tickFormat":",.2f"},"xAxis":{"axisLabel":"False Positive Rate","tickFormat":",.2f"},"color":["#ffbb78","#98df8a","#ff9896","#9467bd","#aec7e8"],"yDomain":[0,1.05],"width":600,"xDomain":[0,1],"height":500}},"plotId":"lineChart-002","event":"plot"}},"task":"call","id":5},"noteId":"2CCFVJKN4"}],"2CCCWNCTQ:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}